// ===============================================
// CapricEngine - PASSING_CHORD_RULES.js
// Regole musicali coerenti per l'inserimento di passing chords tra accordi di una progressione
// Per uso nel generatore armonico con helpers teorici
// ===============================================

const PASSING_CHORD_RULES = [
    // --- CLASSICI DIATONICI E FUNZIONALI ---
    {
        // Tra I e IV in maggiore: V7/IV (cioè I7)
        condition: (chord1, chord2, keyInfo, scaleType) => (
            chord1.degree === 'I' && chord2.degree === 'IV' && scaleType === 'major'
        ),
        generatePassingChord: (chord1, chord2, keyInfo, helpers) => (
            helpers.normalizeChordNameToSharps(keyInfo.root + helpers.QUALITY_DEFS.dom7.suffix)
        ),
        durationBeats: 0.5,
        probability: 0.4
    },
    {
        // Tra IV e V in maggiore: #IVdim (es. F#dim in C)
        condition: (chord1, chord2, keyInfo, scaleType) => (
            chord1.degree === 'IV' && chord2.degree === 'V' && scaleType === 'major'
        ),
        generatePassingChord: (chord1, chord2, keyInfo, helpers) => {
            const tonicIndex = helpers.NOTE_NAMES.indexOf(keyInfo.root);
            const sharpIV = helpers.getNoteName((tonicIndex + 6) % 12); // #IV è 6 semitoni sopra I
            return helpers.normalizeChordNameToSharps(sharpIV + helpers.QUALITY_DEFS.dim.suffix);
        },
        durationBeats: 0.5,
        probability: 0.3
    },
    {
        // Tra I e V in maggiore: bII7 (tritone sub, es. Db7 in C)
        condition: (chord1, chord2, keyInfo, scaleType) => (
            chord1.degree === 'I' && chord2.degree === 'V' && scaleType === 'major'
        ),
        generatePassingChord: (chord1, chord2, keyInfo, helpers) => {
            const tonicIndex = helpers.NOTE_NAMES.indexOf(keyInfo.root);
            const bII = helpers.getNoteName((tonicIndex + 1) % 12); // bII è semitono sopra I
            return helpers.normalizeChordNameToSharps(bII + helpers.QUALITY_DEFS.dom7.suffix);
        },
        durationBeats: 0.5,
        probability: 0.2
    },
    {
        // Tra qualsiasi accordo e la sua quinta giusta: V7 (classico passing chord dominante)
        condition: (chord1, chord2, keyInfo, scaleType) => (
            chord2.root === helpers.getNoteName((helpers.NOTE_NAMES.indexOf(chord1.root) + 7) % 12)
        ),
        generatePassingChord: (chord1, chord2, keyInfo, helpers) => {
            // V7 del secondo accordo
            const rootIndex = helpers.NOTE_NAMES.indexOf(chord2.root);
            const fifthBelow = helpers.getNoteName((rootIndex + 7) % 12);
            return helpers.normalizeChordNameToSharps(fifthBelow + helpers.QUALITY_DEFS.dom7.suffix);
        },
        durationBeats: 0.5,
        probability: 0.25
    },
    // --- REGOLA JAZZ: II-V-I chromatic passing (minor/major) ---
    {
        // Tra II e I: bII7 chromatic passing (Coltrane-style)
        condition: (chord1, chord2, keyInfo, scaleType) => (
            chord1.degree === 'II' && chord2.degree === 'I'
        ),
        generatePassingChord: (chord1, chord2, keyInfo, helpers) => {
            // bII7 rispetto alla tonica
            const tonicIndex = helpers.NOTE_NAMES.indexOf(keyInfo.root);
            const bII = helpers.getNoteName((tonicIndex + 1) % 12);
            return helpers.normalizeChordNameToSharps(bII + helpers.QUALITY_DEFS.dom7.suffix);
        },
        durationBeats: 0.5,
        probability: 0.3
    },
    // --- MINORE CLASSICO ---
    {
        // Tra I e IV minore: V7/iv (cioè I7 minore)
        condition: (chord1, chord2, keyInfo, scaleType) => (
            chord1.degree === 'I' && chord2.degree === 'iv' && scaleType === 'minor'
        ),
        generatePassingChord: (chord1, chord2, keyInfo, helpers) => (
            helpers.normalizeChordNameToSharps(keyInfo.root + helpers.QUALITY_DEFS.dom7.suffix)
        ),
        durationBeats: 0.5,
        probability: 0.3
    },
    {
        // Tra i e V in minore: bII7 (tritone sub minore)
        condition: (chord1, chord2, keyInfo, scaleType) => (
            chord1.degree.toLowerCase() === 'i' && chord2.degree.toLowerCase() === 'v' && scaleType === 'minor'
        ),
        generatePassingChord: (chord1, chord2, keyInfo, helpers) => {
            const tonicIndex = helpers.NOTE_NAMES.indexOf(keyInfo.root);
            const bII = helpers.getNoteName((tonicIndex + 1) % 12);
            return helpers.normalizeChordNameToSharps(bII + helpers.QUALITY_DEFS.dom7.suffix);
        },
        durationBeats: 0.5,
        probability: 0.2
    },
    // --- CHROMATICI E ALTERATI ---
    {
        // Qualsiasi passaggio: cromatismo ascendente di mezzo tono tra bassi
        condition: (chord1, chord2, keyInfo, scaleType) => {
            const idx1 = helpers.NOTE_NAMES.indexOf(chord1.root);
            const idx2 = helpers.NOTE_NAMES.indexOf(chord2.root);
            return Math.abs(idx2 - idx1) === 2 || Math.abs(idx2 - idx1) === 1; // step di tono o semitono
        },
        generatePassingChord: (chord1, chord2, keyInfo, helpers) => {
            // Nota di passaggio tra i due accordi (cromatica minore o maggiore)
            const idx1 = helpers.NOTE_NAMES.indexOf(chord1.root);
            const idx2 = helpers.NOTE_NAMES.indexOf(chord2.root);
            const passingIdx = (idx1 + ((idx2 > idx1) ? 1 : -1)) % 12;
            const passingNote = helpers.getNoteName((passingIdx + 12) % 12);
            return helpers.normalizeChordNameToSharps(passingNote + helpers.QUALITY_DEFS.dim.suffix);
        },
        durationBeats: 0.5,
        probability: 0.18
    },
    // --- ALTERATI JAZZ FUSION ---
    {
        // Tra IV e I: ivm7 (modale/fusion)
        condition: (chord1, chord2, keyInfo, scaleType) => (
            chord1.degree === 'IV' && chord2.degree === 'I'
        ),
        generatePassingChord: (chord1, chord2, keyInfo, helpers) => {
            // ivm7 nella tonalità maggiore (es. Fm7 in C)
            const idxIV = (helpers.NOTE_NAMES.indexOf(keyInfo.root) + 5) % 12;
            const ivRoot = helpers.getNoteName(idxIV);
            return helpers.normalizeChordNameToSharps(ivRoot + helpers.QUALITY_DEFS.min7.suffix);
        },
        durationBeats: 1,
        probability: 0.18
    },
    // --- DOMINANTE SECONDO GRADO ---
    {
        // Tra II e V: II7 (dominante secondaria)
        condition: (chord1, chord2, keyInfo, scaleType) => (
            chord1.degree === 'II' && chord2.degree === 'V'
        ),
        generatePassingChord: (chord1, chord2, keyInfo, helpers) => {
            // II7 dominante (es. D7 in C)
            const idxII = (helpers.NOTE_NAMES.indexOf(keyInfo.root) + 2) % 12;
            const IIroot = helpers.getNoteName(idxII);
            return helpers.normalizeChordNameToSharps(IIroot + helpers.QUALITY_DEFS.dom7.suffix);
        },
        durationBeats: 0.5,
        probability: 0.25
    },
        // Tra I e IV in maggiore: V7/IV (I7)
   {
        condition: (chord1, chord2, keyInfo, scaleType) =>
            chord1.degree === 'I' && chord2.degree === 'IV' && scaleType === 'major',
        generatePassingChord: (chord1, chord2, keyInfo, helpers) =>
            helpers.normalizeChordNameToSharps(keyInfo.root + helpers.QUALITY_DEFS.dom7.suffix),
        durationBeats: 0.5,
        probability: 0.4
    },
    // ... altri oggetti regola ...
    {
        // Tra IV e V in maggiore: #IVdim
        condition: (chord1, chord2, keyInfo, scaleType) =>
            chord1.degree === 'IV' && chord2.degree === 'V' && scaleType === 'major',
        generatePassingChord: (chord1, chord2, keyInfo, helpers) => {
            const tonicIndex = helpers.NOTE_NAMES.indexOf(keyInfo.root);
            const sharpIV = helpers.getNoteName((tonicIndex + 6) % 12);
            return helpers.normalizeChordNameToSharps(sharpIV + helpers.QUALITY_DEFS.dim.suffix);
        },
        durationBeats: 0.5,
        probability: 0.3
    },
    // ---- PROG, MODAL MIXTURE, JAZZ, CINEMATIC ----
    {
        // Tra I e V in maggiore: bII7 (Tritone sub, prog/jazz/cinematic)
        condition: (chord1, chord2, keyInfo, scaleType) =>
            chord1.degree === 'I' && chord2.degree === 'V' && scaleType === 'major',
        generatePassingChord: (chord1, chord2, keyInfo, helpers) => {
            const tonicIndex = helpers.NOTE_NAMES.indexOf(keyInfo.root);
            const bII = helpers.getNoteName((tonicIndex + 1) % 12);
            return helpers.normalizeChordNameToSharps(bII + helpers.QUALITY_DEFS.dom7.suffix);
        },
        durationBeats: 0.5,
        probability: 0.23
    },
    {
        // Tra V e I in maggiore: bVI7 (cinematic, fusion)
        condition: (chord1, chord2, keyInfo, scaleType) =>
            chord1.degree === 'V' && chord2.degree === 'I',
        generatePassingChord: (chord1, chord2, keyInfo, helpers) => {
            const tonicIndex = helpers.NOTE_NAMES.indexOf(keyInfo.root);
            const bVI = helpers.getNoteName((tonicIndex + 8) % 12);
            return helpers.normalizeChordNameToSharps(bVI + helpers.QUALITY_DEFS.dom7.suffix);
        },
        durationBeats: 1,
        probability: 0.17
    },
    {
        // Tra IV e I in maggiore: bVII7 (soul/cinematic/film)
        condition: (chord1, chord2, keyInfo, scaleType) =>
            chord1.degree === 'IV' && chord2.degree === 'I' && scaleType === 'major',
        generatePassingChord: (chord1, chord2, keyInfo, helpers) => {
            const tonicIndex = helpers.NOTE_NAMES.indexOf(keyInfo.root);
            const bVII = helpers.getNoteName((tonicIndex + 10) % 12);
            return helpers.normalizeChordNameToSharps(bVII + helpers.QUALITY_DEFS.dom7.suffix);
        },
        durationBeats: 1,
        probability: 0.15
    },
    {
        // Chromatic dim/aug tra II-III o III-IV
        condition: (chord1, chord2, keyInfo, scaleType, helpers) =>
            (chord1.degree === 'II' && chord2.degree === 'III') || (chord1.degree === 'III' && chord2.degree === 'IV'),
        generatePassingChord: (chord1, chord2, keyInfo, helpers) => {
            const idx1 = helpers.NOTE_NAMES.indexOf(chord1.root);
            const idx2 = helpers.NOTE_NAMES.indexOf(chord2.root);
            if (Math.abs(idx2 - idx1) === 1) {
                const passingIdx = (idx1 + ((idx2 > idx1) ? 1 : -1)) % 12;
                const passingNote = helpers.getNoteName((passingIdx + 12) % 12);
                return helpers.normalizeChordNameToSharps(passingNote + helpers.QUALITY_DEFS.dim.suffix);
            } else {
                const passingIdx = (idx1 + ((idx2 > idx1) ? 2 : -2)) % 12;
                const passingNote = helpers.getNoteName((passingIdx + 12) % 12);
                return helpers.normalizeChordNameToSharps(passingNote + helpers.QUALITY_DEFS.aug.suffix);
            }
        },
        durationBeats: 0.5,
        probability: 0.13
    },
    {
        // Mixture modale tra I e bIII (cinematic/prog/pop)
        condition: (chord1, chord2, keyInfo, scaleType, helpers) =>
            chord1.degree === 'I' && chord2.degree === 'bIII',
        generatePassingChord: (chord1, chord2, keyInfo, helpers) => {
            const tonicIndex = helpers.NOTE_NAMES.indexOf(keyInfo.root);
            const bII = helpers.getNoteName((tonicIndex + 1) % 12);
            return helpers.normalizeChordNameToSharps(bII + helpers.QUALITY_DEFS.min7.suffix);
        },
        durationBeats: 0.5,
        probability: 0.13
    },
    {
        // Sus4 passing tra V-I (fusion, jazz pop)
        condition: (chord1, chord2, keyInfo, scaleType, helpers) =>
            chord1.degree === 'V' && chord2.degree === 'I',
        generatePassingChord: (chord1, chord2, keyInfo, helpers) =>
            helpers.normalizeChordNameToSharps(chord1.root + helpers.QUALITY_DEFS.sus4.suffix),
        durationBeats: 0.5,
        probability: 0.15
    },
    {
        // Chromatic fusion (Steely Dan): II - bIII7 - V
        condition: (chord1, chord2, keyInfo, scaleType, helpers) =>
            chord1.degree === 'II' && chord2.degree === 'V',
        generatePassingChord: (chord1, chord2, keyInfo, helpers) => {
            const tonicIndex = helpers.NOTE_NAMES.indexOf(keyInfo.root);
            const bIII = helpers.getNoteName((tonicIndex + 3) % 12);
            return helpers.normalizeChordNameToSharps(bIII + helpers.QUALITY_DEFS.dom7.suffix);
        },
        durationBeats: 0.5,
        probability: 0.11
    },
    {
        // bVII maggiore (rock): tra V e I
        condition: (chord1, chord2, keyInfo, scaleType, helpers) =>
            chord1.degree === 'V' && chord2.degree === 'I',
        generatePassingChord: (chord1, chord2, keyInfo, helpers) => {
            const tonicIndex = helpers.NOTE_NAMES.indexOf(keyInfo.root);
            const bVII = helpers.getNoteName((tonicIndex + 10) % 12);
            return helpers.normalizeChordNameToSharps(bVII + helpers.QUALITY_DEFS.major.suffix);
        },
        durationBeats: 1,
        probability: 0.13
    },
    // ---- EXTRA: MINOR, DOM7, SUS, FUSION, FILM ----
    {
        // Passing sus2 tra V-I (prog, soundtrack)
        condition: (chord1, chord2, keyInfo, scaleType, helpers) =>
            chord1.degree === 'V' && chord2.degree === 'I',
        generatePassingChord: (chord1, chord2, keyInfo, helpers) =>
            helpers.normalizeChordNameToSharps(chord1.root + helpers.QUALITY_DEFS.sus2.suffix),
        durationBeats: 0.5,
        probability: 0.08
    },
    {
        // VI - V in minore: V7/VI
        condition: (chord1, chord2, keyInfo, scaleType, helpers) =>
            chord1.degree === 'VI' && chord2.degree === 'V' && scaleType === 'minor',
        generatePassingChord: (chord1, chord2, keyInfo, helpers) => {
            const idxVI = (helpers.NOTE_NAMES.indexOf(keyInfo.root) + 9) % 12;
            const VIroot = helpers.getNoteName(idxVI);
            return helpers.normalizeChordNameToSharps(VIroot + helpers.QUALITY_DEFS.dom7.suffix);
        },
        durationBeats: 0.5,
        probability: 0.11
    },
    // Chromatic diminished (qualunque step di semitono)
    {
        condition: (chord1, chord2, keyInfo, scaleType, helpers) => {
            const idx1 = helpers.NOTE_NAMES.indexOf(chord1.root);
            const idx2 = helpers.NOTE_NAMES.indexOf(chord2.root);
            return Math.abs(idx2 - idx1) === 1;
        },
        generatePassingChord: (chord1, chord2, keyInfo, helpers) => {
            const idx1 = helpers.NOTE_NAMES.indexOf(chord1.root);
            const idx2 = helpers.NOTE_NAMES.indexOf(chord2.root);
            const passingIdx = (idx1 + ((idx2 > idx1) ? 1 : -1)) % 12;
            const passingNote = helpers.getNoteName((passingIdx + 12) % 12);
            return helpers.normalizeChordNameToSharps(passingNote + helpers.QUALITY_DEFS.dim.suffix);
        },
        durationBeats: 0.5,
        probability: 0.12
    }
    
]